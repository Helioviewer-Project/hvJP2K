#!/usr/bin/env python

import argparse
import glymur
import logging
import os
import shutil
import sys
import tempfile

from hvJP2K.jp2.jp2_common import first_box

def transcode(filepath, corder='RPCL', orggen_plt='yes', cprecincts=[128, 128], xml_rewrite=False):
    """Transcodes JPEG 2000 images to allow support for use with JHelioviewer
    and the JPIP server"""

    tmp = tempfile.NamedTemporaryFile(suffix='.j2c').name

    # Base command
    command ='kdu_transcode -i %s -o %s' % (filepath, tmp)
    # Corder
    if corder is not None:
        command += " Corder=%s" % corder

    # ORGgen_plt
    if orggen_plt is not None:
        command += " ORGgen_plt=%s" % orggen_plt

    # Cprecincts
    if cprecincts is not None:
        command += " Cprecincts=\{%d,%d\}" % (cprecincts[0], cprecincts[1])

    # Hide output
    command += " >/dev/null"

    # Execute kdu_transcode
    os.system(command)
    if not os.path.isfile(tmp):
        raise Exception('kdu_transcode: ' + filepath)

    j2c = glymur.Jp2k(tmp)
    jp2 = glymur.Jp2k(filepath)

    jp2_cs = first_box(jp2.box, 'jp2c')
    jp2.box[jp2.box.index(jp2_cs)] = glymur.jp2box.ContiguousCodestreamBox(j2c.get_codestream())

    if xml_rewrite:
        xml_ = first_box(jp2.box, 'xml ')
        if xml_ is not None:
            jp2.box[jp2.box.index(xml_)] = glymur.jp2box.XMLBox(xml_.xml)

    tmp2 = tempfile.NamedTemporaryFile().name
    j2c.wrap(tmp2, boxes=jp2.box)

    shutil.move(tmp2, filepath)
    os.remove(tmp)

def get_recursive_file_list(rootdir):
    """Get all files in a given directory recursively."""
    fileList = []
    for r,d,f in os.walk(rootdir):
        for fs in f:
            fileList.append(os.path.join(r, fs))
    return fileList

parser = argparse.ArgumentParser(description='This script is used to transcode HV JP2 files.')
parser.add_argument('-d', '--directory', metavar='base_dir', help='The directory to transcode', required=True)
parser.add_argument('-x', '--xml-rewrite', help='Rewrite XML box', action='store_true')
args = parser.parse_args()

for path in get_recursive_file_list(args.directory):
    transcode(path, xml_rewrite=args.xml_rewrite)
