#!/usr/bin/env python

import argparse
import fileinput
import sys

from hvJP2K.jpx.jpx_merge import jpx_merge,jpx_merge_from_db

parser = argparse.ArgumentParser(description='Merge JP2 files into JPX files.')
parser.add_argument('-i', metavar='jp2file1,jp2file2,...', help='comma separated input JP2 filenames', nargs='+')
parser.add_argument('-o', metavar='jpxfile', help='output JPX filename')
parser.add_argument('-links', help='record links rather than actual codestream data', action='store_true')
parser.add_argument('-s', metavar='argfile', help='read arguments from file')
args = parser.parse_args()

if args.s:
    arg_strings = []
    for line in fileinput.input(args.s):
        for arg in line.split():
            if not arg.strip():
                continue
            arg_strings.append(arg)
    # reparse with possible new arguments
    args = parser.parse_args(sys.argv[1:] + arg_strings)

if args.i is None:
    print('hv_jpx_merge: error: argument -i is required')
    sys.exit(1)
if args.o is None:
    print('hv_jpx_merge: error: argument -o is required')
    sys.exit(1)

# be lenient with stray commas
names = (name.encode() for name in args.i if name)
names_in = [name for name in b','.join(names).split(b',')]

#from redis import Redis
#from rq import Queue

#q = Queue(connection=Redis())
#result = q.enqueue(jpx_merge, names_in, args.o, args.links)
#if args.links:
jpx_merge_from_db(names_in, args.o)
#else:
#    jpx_merge(names_in, args.o, args.links)

'''
import pstats, cProfile

cProfile.runctx('jpx_merge(names_in, args.o, args.links)', globals(), locals(), "Profile.prof")

s = pstats.Stats('Profile.prof')
s.strip_dirs().sort_stats('cumulative').print_stats()
'''
