#!/usr/bin/env python

import os, re, sys, argparse
# to be configured
os.environ['XDG_CONFIG_HOME'] = '/swhv/python/etc'

import numpy as np
from glymur import Jp2k
from glymur.lib import openjp2 as opj2
from lxml import etree as et
from PIL import Image

if opj2.OPENJP2 is None:
    raise RuntimeError('You must have at least version 2 of OpenJPEG before using this program.')

parser = argparse.ArgumentParser(description='Decode JP2 files.')
parser.add_argument('-i', metavar='jp2file', help='input JP2 filename', required=True)
parser.add_argument('-o', metavar='file', help='output filename', required=True)
parser.add_argument('-region', metavar='{<top>,<left>},{<height>,<width>}', help='region of interest')
parser.add_argument('-reduce', metavar='<discard levels>', help='resolution levels to be discarded', type=int, nargs='?', default=0)
parser.add_argument('-codestream_components', help='suppress multi-component/colour xforms', action='store_true')
parser.add_argument('-xml', help='print to terminal the XML metadata', action='store_true')
parser.add_argument('-v', '--verbose', help='verbose operation', action='store_true')
args = parser.parse_args()

jp2 = Jp2k(args.i)

xml_ = [b for b in jp2.box if b.box_id == b'xml ']
if args.xml and xml_ is not None:
    print(et.tostring(xml_[0].xml))

code = jp2.get_codestream()
xsiz = code.segment[1].xsiz
ysiz = code.segment[1].ysiz

area = None
if args.region is not None:
    area = [float(n) for n in re.split('\{|,|\}', args.region) if n != '']
    if len(area) != 4:
        area = None
    else:
        # to (top left, bottom right)
        area[2] += area[0]
        area[3] += area[1]
        area = [np.clip(n, 0, 1) for n in area]
        # to pixels
        area[0] *= ysiz
        area[1] *= xsiz
        area[2] *= ysiz
        area[3] *= xsiz
        area = [int(n + .5) for n in area]

rlevel = np.clip(args.reduce, 0, code.segment[2].spcod[4])

# exception for zero size image
data = jp2.read(verbose=args.verbose, rlevel=rlevel, area=area, ignore_pclr_cmap_cdef=args.codestream_components)
im = Image.fromarray(data)
im.save(args.o)
